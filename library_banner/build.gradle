apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    api 'androidx.appcompat:appcompat:1.1.0'
    //库依赖
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    api 'androidx.viewpager:viewpager:1.0.0'
    api files('libs\\universal-image-loader-1.9.5.jar')
}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
//compile 'group:libName:version'
//group(组名字)
group = "com.yey.bannery"
//libName(库的名字)
def libName = "BannerY"
//version(版本号)
version = "0.0.7"
//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
//生成文档
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    options.author true
    options.version true
    failOnError false
}
//文档打包成jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
//拷贝javadoc文件
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}
//上传到jCenter所需要的源码文件
artifacts {
    archives javadocJar
    archives sourcesJar
}
//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    //读取 local.properties 文件里面的 bintray.user
    user = properties.getProperty("bintray.user")
    //读取 local.properties 文件里面的 bintray.apikey
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        //所创建的Maven类型仓库的名称
        repo = "Yey"
        //库的名字
        name = libName
        //项目描述
        desc = 'Banner'
        licenses = ["Apache-2.0"]
        publish = true

    }
}


